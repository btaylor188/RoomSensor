esphome:
  name: "livingroom-sensor"

esp8266:
  board: esp01_1m

# Enable logging
logger:
  baud_rate: 0
# Enable Home Assistant API
api:

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-livingroom"
    password: "password"

captive_portal:

web_server:
  port: 80
  version: 2
  include_internal: true
  ota: false
  auth:
    username: admin
    password: !secret web_server_password

dashboard_import:
  package_import_url: github://everythingsmarthome/presence-one/everything-presence-one.yaml

i2c:
  sda: GPIO4
  scl: GPIO5
  scan: true
  id: bus_a

remote_transmitter:
  pin: GPIO12
  carrier_duty_percent: 50%

sensor:
  - platform: bme280
    temperature:
      name: "Living Room Temperature"
      oversampling: 16x
    pressure:
      name: "Living Room Pressure"
    humidity:
      name: "Living Room Humidity"
    address: 0x76
    update_interval: 60s
  - platform: bh1750
    name: "Living Room Illuminance"
    address: 0x23
    update_interval: 5s
  - platform: wifi_signal
    name: "Living Room WiFi Signal"
    update_interval: 60s

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO13
      mode: INPUT_PULLUP
    name: "Living Room PIR"
    device_class: motion
    id: pir_motion_sensor
    filters:
      - delayed_off: 10s   
  - platform: gpio
    name: Living Room mmWave
    id: mmwave
    device_class: occupancy
    pin:
      number: GPIO16
      mode: INPUT_PULLDOWN
  - platform: template
    name: Living Room Occupancy
    id: occupancy
    device_class: occupancy
    filters:
      - delayed_off: 60s
    lambda: |-
      if ( id(mmwave).state or id(pir_motion_sensor).state) {
        return true;
      } 
      else if (id(mmwave).state == 0 and id(pir_motion_sensor).state == 0) {
        return false;
      } 
      else {
        return id(occupancy).state;
        }
uart:
  id: uart_bus
  tx_pin: TX
  rx_pin: RX
  baud_rate: 115200
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);
switch:
  - platform: safe_mode
    internal: true
    name: use_safe_mode
  
  - platform: template
    name: "TV Power"
    turn_on_action:
      remote_transmitter.transmit_nec:
        address: 0xFB04
        command: 0xF708

  - platform: template
    name: "Vol +"
    turn_on_action:
      remote_transmitter.transmit_nec:
        address: 0xFF00
        command: 0xBE41

  - platform: template
    name: "Vol -"
    turn_on_action:
      remote_transmitter.transmit_nec:
        address: 0xFF00
        command: 0xBA45

  - platform: template
    name: "Mute"
    turn_on_action:
      remote_transmitter.transmit_nec:
        address: 0xFF00
        command: 0xB748

  - platform: template
    name: "Input"
    turn_on_action:
      remote_transmitter.transmit_nec:
        address: 0xFB04
        command: 0xD02F
       
  - platform: template
    name: "mmWave Sensor"
    id: "mmwave_sensor"
    optimistic: true
    restore_state: true
    assumed_state: true
    turn_on_action:
      - uart.write: "sensorStart"
      - delay: 1s
    turn_off_action:
      - uart.write: "sensorStop"
      - delay: 1s

  - platform: template
    name: "mmWave LED"
    id: "mmwave_led"
    optimistic: true
    restore_state: true
    assumed_state: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "uart_presence_output"
    id: "uart_presence_output"
    optimistic: true
    restore_state: true
    assumed_state: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "uart_target_output"
    id: "uart_target_output"
    optimistic: true
    restore_state: true
    assumed_state: false
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor


number:
  - platform: template
    name: mmWave Distance
    id: mmwave_distance
    min_value: 0
    max_value: 800
    initial_value: 315
    optimistic: true
    step: 15
    restore_value: true
    unit_of_measurement: cm
    mode: box
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int cm = (int)ceil(x / 15.0);
          std::string cms = "detRangeCfg -1 0 " + to_string(cm);
          return std::vector<unsigned char>(cms.begin(), cms.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: mmWave Off Latency
    id: mmwave_latency
    min_value: 0
    max_value: 65000
    initial_value: 5000
    optimistic: true
    step: 25
    restore_value: true
    unit_of_measurement: ms
    mode: box
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int ms = (int)ceil(x / 25.0);
          std::string mss = "outputLatency -1 0 " + to_string(ms);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: mmWave Sensitivity
    id: mmwave_sensitivity
    min_value: 0
    max_value: 9
    initial_value: 4
    optimistic: true
    step: 1
    restore_value: true
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write:
          !lambda std::string mss = "setSensitivity " + to_string((int)x);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

button:
  - platform: restart
    name: Restart Living Room Sensor

  - platform: template
    name: "factory_reset_dfrobot"
    id: "factory_reset_dfrobot"
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor


